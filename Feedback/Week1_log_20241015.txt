Starting code feedback for Laiyin, Week1

Current Points = 100

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.41 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: Feedback, week1, .git, week2

Found the following files in parent directory: README.md

Checking for key files in parent directory...

.gitignore missing, 1 pt deducted

Current Points = 99

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# My CMEE Coursework Repository

This repository is to submit the author's CMEE coursework. It contains the in-class practices and praticals from **The Multilingual Quantitative Biologist** online book https://themulquabio.github.io/TMQB/intro.html.

All codes in this project were written in and tested with bash terminal of Ubuntu 24.04.1 LTS, Python 3.12.3 and R 4.4.1.

## Usage

### Project structure

The `code` directory includes all code and scripts. You can run the scripts directly. The `data` directory contains neccessary data to run the code. Results will automatically generate in the `results` directory when the assessment script runs.

### Dependencies

See specific requirements in each week's `README` file.

## Author
Laiyin Zhou
l.zhou24@imperial.ac.uk
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 2 weekly directories: week1, week2

The Week1 directory will be assessed 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Assessing WEEK1...

Found the following directories: Results, code, data

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE Week1 Coursework

This directory contains the in-class practices and praticals for biological computating bootcamp week1. Contents covered Unix and Linux, Shell scripting and Scienific documents with LaTeX. All the teaching materials and practical questions are on https://themulquabio.github.io/TMQB/intro.html.

All codes in this project were written in and tested with bash terminal of Ubuntu 24.04.1 LTS.

## Usage

### Project structure

The `code` directory includes command lines for Unix practical 1 (`Unixprac1.txt`), shell scripts practices (*.sh) and LaTex example (`FirstExample.tex` and `Firstbiblio.bib`). The `data` directory contains a text file to test `grep` command and fasta data for running commands in `Unixprac1.txt`.

### Dependencies

LaTex and ImageMagick need to be installed if not already on the device.

## Author
Laiyin Zhou
l.zhou24@imperial.ac.uk

**********************************************************************

Results directory is empty - good! 

Found 11 code files: FirstBiblio.bib, csvtospace.sh, variables.sh, boilerplate.sh, tiff2png.sh, FirstExample.tex, UnixPrac1.txt, tabtocsv.sh, MyExampleScript.sh, ConcatenateTwoFiles.sh, Countlines.sh

======================================================================
Testing script/code files...

======================================================================
Inspecting script file FirstBiblio.bib...

File contents are:

**********************************************************************
@article{verhulst1838notice,
  title={Notice sur la loi que la population suit dans son accroissement},
  author={Verhulst, Pierre-Fran{\c{c}}ois},
  journal={Correspondence mathematique et physique},
  volume={10},
  pages={113--129},
  year={1838}
}

**********************************************************************

Testing FirstBiblio.bib...

======================================================================
Inspecting script file csvtospace.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: Laiyin Zhou (l.zhou24@imperial.ac.uk)
# Script: csvtospace.sh
# Description: converts a csv file to a space seperated values file.
# Saves the output into a new .txt file
# Arguments: 1 -> comma delimited file
# Date: Oct 2024

if [ $# != 1 ]; then
        echo "Please provide a file input on the command line!"
        exit
fi

if [[ $1 != *.csv ]]; then
        echo "The input file should be a CSV (.csv) file!"
        exit
fi

if [ ! -f "$1" ]; then
        echo "File $1 does not exist!"
        exit
fi

echo "Creating a space seperated version of $1 ..."
cat $1 | tr -s "," "\t" >> ${1%.csv}.txt
echo "Done!"
exit
**********************************************************************

Testing csvtospace.sh...

Output (only first 500 characters): 


**********************************************************************
Please provide a file input on the command line!

**********************************************************************

Code ran without errors

Time consumed = 0.00365s

======================================================================
Inspecting script file variables.sh...

File contents are:

**********************************************************************
#!/bin/sh

## Illustrates the use of variables

# Special variables

echo "This script was called with $# parameters"
echo "This script's name is $0"
echo "The arguments are $@"
echo "The First argument is $1"
echo "The second argument is $2"

# Assigned Variables; Explicit declaration:
MY_VAR='some string'
echo 'the current value of the variable is :' $MY_VAR
echo
echo 'Please enter a new string'
read MY_VAR
echo
echo 'the current value of the variable is:' $MY_VAR
echo

# Assigned variables; Reading (multiple values) from user input:
echo 'Enter two numbers separated by space(s)'
read a b
echo
echo 'you entered' $a 'and' $b'; Their sum is:'

## Assigned Variables; Command substitution
MY_SUM=$(expr $a + $b)
echo $MY_SUM

**********************************************************************

Testing variables.sh...

Output (only first 500 characters): 


**********************************************************************
This script was called with 0 parameters
This script's name is variables.sh
The arguments are 
The First argument is 
The second argument is 
the current value of the variable is : some string

Please enter a new string

the current value of the variable is:

Enter two numbers separated by space(s)

you entered and ; Their sum is:


**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

expr: syntax error: missing argument after ‘+’

======================================================================
Inspecting script file boilerplate.sh...

File contents are:

**********************************************************************
#!/bin/sh
#Author: l.zhou@imperial.ac.uk
#Script: boilerplate.sh
#Desc: simple boilerplate for shell scripts
#Arguments: none
#Date: Oct 2024

echo -e "\nThis is a shell script! \n"

#exit

**********************************************************************

Testing boilerplate.sh...

Output (only first 500 characters): 


**********************************************************************

This is a shell script! 


**********************************************************************

Code ran without errors

Time consumed = 0.00550s

======================================================================
Inspecting script file tiff2png.sh...

File contents are:

**********************************************************************
#!/bin/bash

for f in *.tif;
    do
        echo "Converting $f";
        convert "$f" "$(basename "$f" .tif).png";
    done
**********************************************************************

Testing tiff2png.sh...

Output (only first 500 characters): 


**********************************************************************
Converting *.tif

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

convert-im6.q16: unable to open image `*.tif': No such file or directory @ error/blob.c/OpenBlob/2964.
convert-im6.q16: no images defined `*.png' @ error/convert.c/ConvertImageCommand/3234.

======================================================================
Inspecting script file FirstExample.tex...

File contents are:

**********************************************************************
\documentclass[12pt]{article}

\title{A simple Document}

\author{Laiyin Zhou}

\date{Oct 7 2024}

\begin{document}
  \maketitle

  \begin{abstract}
    This paper analyzes a seminal equation in population biology.
  \end{abstract}

  \section{Introduction}
  Blah Blah Hahaha

  \section{Materials \& Methods}

  A foundational equation of population biology is:

  \begin{equation}
    \frac{dN}{dt} = r N (1 - \frac{N}{K})
  \end{equation}

  It was first proposed by Verhulst in 1838 \cite{verhulst1838notice}.

  \bibliographystyle{plain}

  \bibliography{FirstBiblio}

\end{document}
**********************************************************************

Testing FirstExample.tex...

======================================================================
Inspecting script file UnixPrac1.txt...

File contents are:

**********************************************************************
#change directory to fasta
cd ../data/fasta

# 1 Count how many lines in each file
wc -l *.fasta

# 2 Print E.coli genome from the second line
tail -n +2 E.coli.fasta

# 3 Count the sequence length of E.coli genome
tail -n +2 E.coli.fasta | tr -d '\n' | wc -c

# 4 Count "ATGC" matches in the E.coli genome
grep -c ATGC E.coli.fasta

# 5 Calculate AT/GC ratio in each file
find . -name "*.fasta" -exec sh -c 'tail -n +2 "$1" | awk "{A+=gsub(/A/, \"A\"); T+=gsub(/T/, \"T\"); G+=gsub(/G/, \"G\"); C+=gsub(/C/, \"C\")} END {{print \"$1: \" (A+T)/(G+C)}}" ' _ {} \;

# the '.' after find refers to the current directory.
# -exec allows find to execue the following command (sh -c '...' _ {}) for each file it finds.
# sh -c '...' executes the shell command inside '...'.
# _ {} are placeholders for arguments: 
# _ is a dummy placeholder required by sh -c. Because in sh -c, the first argument (_) is the name of the script, while file name is $1.
# {} represents each file from find.
# awk is for pattern scanning and text proccessing.
# A+=: add the result of gsub() to A. Variable A is initialized by awk as 0.
# gsub (global substitution) searches for matches and replace the string. It returns the number of substitutions. Sytax: gsub(regex, replacement)
# gsub(/A/, \"A\") replaces A with itself, which returns the number of A. The \ are to escape double quoes inside the sh -c command. 
# END {...} runs after processing all lines in the file.
# \; at the end indicates to execute each file found.
**********************************************************************

Testing UnixPrac1.txt...

======================================================================
Inspecting script file tabtocsv.sh...

File contents are:

**********************************************************************
#!/bin/sh
# Author: l.zhou24@imperial.ac.uk
# Script: tabtocsv.sh
# Description: substitute the tabs in the files with commas
#
# Saves the output into a .csv file
# Arguments: 1 -> tab delimited file
# Date: Oct 2024

if [ $# != 1 ]; then
        echo "Please provide a file input on the command line!"
        exit
fi

if [[ $1 != *.txt ]]; then
        echo "The input file should be a text (.txt) file!"
        exit
fi

if [ ! -f "$1" ]; then
        echo "File $1 does not exist!"
        exit
fi

echo "Creaing a comma delimited version of $1 ..."
cat $1 | tr -s "\t" "," >> ${1%.txt}.csv
echo "Done!"
exit
**********************************************************************

Testing tabtocsv.sh...

Output (only first 500 characters): 


**********************************************************************
Please provide a file input on the command line!

**********************************************************************

Code ran without errors

Time consumed = 0.00429s

======================================================================
Inspecting script file MyExampleScript.sh...

File contents are:

**********************************************************************
#!/bin/sh

MSG1="Hello"
MSG2=$user
echo "$MSG1 $MSG2"
echo "Hello $USER"
echo
**********************************************************************

Testing MyExampleScript.sh...

Output (only first 500 characters): 


**********************************************************************
Hello 
Hello mhasoba


**********************************************************************

Code ran without errors

Time consumed = 0.00410s

======================================================================
Inspecting script file ConcatenateTwoFiles.sh...

File contents are:

**********************************************************************
#!/bin/bash

if [ $# != 3 ]; then
        echo "Please provide two input files and one output file on the command line!"
        exit
fi

if [ ! -f "$1" ]; then
        echo "File $1 does not exist!"
        exit
fi

if [ ! -f "$2" ]; then
        echo "File $2 does not exist!"
        exit
fi

cat $1 > $3
cat $2 >> $3
echo "Merged File is"
cat $3

cat $1 > $3
cat $2 >> $3
echo "Merged File is"
cat $3
**********************************************************************

Testing ConcatenateTwoFiles.sh...

Output (only first 500 characters): 


**********************************************************************
Please provide two input files and one output file on the command line!

**********************************************************************

Code ran without errors

Time consumed = 0.00430s

======================================================================
Inspecting script file Countlines.sh...

File contents are:

**********************************************************************
#!/bin/bash

if [ $# != 1 ]; then
        echo "Please provide a file input on the command line!"
        exit
fi

if [ ! -f "$1" ]; then
        echo "File $1 does not exist!"
        exit
fi

NumLines=`wc -l < $1`
echo "The file $1 has $NumLines lines"
echo
**********************************************************************

Testing Countlines.sh...

Output (only first 500 characters): 


**********************************************************************
Please provide a file input on the command line!

**********************************************************************

Code ran without errors

Time consumed = 0.00520s

======================================================================
======================================================================
Finished running scripts

Ran into 2 errors

======================================================================
======================================================================

FINISHED WEEKLY ASSESSMENT

Current Points for the Week = 99

NOTE THAT THESE ARE POINTS, NOT MARKS FOR THE WEEK!