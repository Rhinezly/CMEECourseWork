Starting testing for Laiyin, Week3

Note that: 
(1) Major sections begin with a double "====" line 
(2) Subsections begin with a single "====" line 
(3) Code output or text file content are printed within single "*****" lines 

======================================================================
======================================================================
Your Git repo size this week is about 1.88 MiB on disk 

PART 1: Checking project workflow...

Found the following directories in parent directory: .git, week1, week2, Feedback, week3

Found the following files in parent directory: .gitignore, README.md

Checking for key files in parent directory...

Found .gitignore in parent directory, great! 

Printing contents of .gitignore:

**********************************************************************
sandbox/
*.*
!.gitignore
!.gitkeep
!*.py
!*.R
!*.sh
!*.tex
!*.bib
!*.fasta
!*.csv
!*.txt
!*.md
!*.pdf
**********************************************************************

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# My CMEE Coursework Repository

This repository is to submit the author's CMEE coursework. It contains in-class practices and practicals from **The Multilingual Quantitative Biologist** online book https://themulquabio.github.io/TMQB/intro.html.

All codes in this project were written and tested using the bash terminal on Ubuntu 24.04.1 LTS, Visual Studio Code 1.94.2, Python 3.12.3 and R 4.4.1.

## Usage

### Running the scripts

Most scripts can be executed directly from the shell:
- Shell script: `bash ScriptName.sh`
- Python script: `python3 ScriptName.py`
- R script: `Rscript ScriptName.R`

Some scripts may require additional or mandotory user input. For example, `python3 ScriptName.py argv1 argv2 ...`.

### Project structure

- `code/`: Contains all code and scripts. 
- `data/`: Contains the necessary data files to run the code. 
- `results/`: Results are automatically generate in this directory when the assessment script runs.

### Dependencies

On Linux, you may install LaTex and R by running the following command: 

- **LaTex:**
```bash
sudo apt install texlive-latex-extra
```

- **R:**
```bash
sudo apt install r-base
```

If you need to install Python modules using package manager `pip`, first install `pip`: 

```bash
sudo apt-get install python3-pip
```

Alternatively, install Python modules directly via the system: 

```bash
sudo apt install python3-<module_name>
```

For more detailed installation instructions for different systems, see https://imperial-fons-computing.github.io/.

Additional specific requirements for each week's courework can be found in the correponding week's `README` file.

## Author
Laiyin Zhou
l.zhou24@imperial.ac.uk
**********************************************************************

======================================================================
Looking for the weekly directories...

Found 3 weekly directories: week1, week2, week3

The Week3 directory will be tested 

======================================================================
======================================================================
PART 2: Checking weekly code and workflow...

======================================================================
Testing WEEK3...

Found the following directories: results, data, code

Found the following files: README.md

Checking for readme file in weekly directory...

Found README in parent directory, named: README.md

Printing contents of README.md:

**********************************************************************
# CMEE Week3 Coursework

This directory contains the in-class practices for biological computating bootcamp week3. Contents covered R basic syntax and structures, as well as data management and visualization. All the teaching materials and practical questions are on https://themulquabio.github.io/TMQB/intro.html.

All scripts were written and tested using R 4.4.1, on Visual Studio Code 1.94.2, and the bash terminal on Ubuntu 24.04.1 LTS.

## Usage

### Running the scripts

You can run all scripts without any input. Ensure your working environment is set to the directory containing the scripts (`../week3/code`).

- From the UNIX shell (R and Python scripts):
1. Exit from the R console using `ctrl+D`, or open a new bash terminal.
2. `cd` to the `week3/code` directory. 
3. Run the command:

```bash
Rscript ScriptName.R
```

```bash
python3 Test.py
```

- From the R command line (R scripts):
1. Enter `R` from bash 
2. Use `setwd()` to change to the `week3/code` directory
3. Run the script using:

```R
source("ScriptName.R")
``` 

Alternatively, if you don't want to change the working directory to `../week3/code`, you can specify the path to the script. For example, use `source("../code/ScriptrName.R")` if you are working from the `data` directory.

### Project structure

- `code/`: Contains all in-class scripts for Biological computing in R and Data Management and Visualization. Two additional files, `Test.py` and `Test.R`, demonstrate how to run R code in Python.

- `data/`: Contains the required CSV and TXT files for running the scripts. 

- `results/`: Stores three output PDF files from the data visualization scripts(`Girko.R`, `MyBars.R` and `MyLinReg.R`).

### Dependencies

You need the following R packages to run the scripts: reshape2, tidyverse, and ggplot2. If these are not already installed, you can install them in R with:

```R
install.packages(c("reshape2", "tidyverse", "ggplot2"))
```

In Ubuntu, you need to launch `sudo R` from bash, then run `install.packages()` to install as needed. You can also install them directly from bash terminal: 

```bash
sudo apt install r-cran-<PackageName>
``` 

If you use RStudio, you can also install packages through the GUI(graphical user interface).

## Author
Laiyin Zhou
l.zhou24@imperial.ac.uk
**********************************************************************

Found following files in results directory: MyLinReg.pdf, MyBars.pdf, Girko.pdf...

Ideally, Results directory should be empty other than, perhaps a .gitkeep. 

Found 18 code files: break.R, sample.R, Vectorize1.R, R_conditionals.R, apply1.R, basic_io.R, Girko.R, boilerplate.R, apply2.R, DataWrang.R, control_flow.R, MyBars.R, TreeHeight.R, TestR.py, TestR.R, plotLin.R, next.R, preallocate.R

======================================================================
Testing script/code files...

======================================================================
Inspecting script file break.R...

File contents are:

**********************************************************************
i <- 0
    while (i < Inf) {
        if (i == 10) {
            break  # break out of the loop
        } else {
            cat("i equals ", i, "\n")
            i <- i + 1
    }
}


**********************************************************************

Testing break.R...

Output (only first 500 characters): 


**********************************************************************
i equals  0 
i equals  1 
i equals  2 
i equals  3 
i equals  4 
i equals  5 
i equals  6 
i equals  7 
i equals  8 
i equals  9 

**********************************************************************

Code ran without errors

Time consumed = 0.10675s

======================================================================
Inspecting script file sample.R...

File contents are:

**********************************************************************
############### Functions ##################

# A function to take a smaple of size n from a population 'popn' and return its mean
myexperiment <- function(popn, n) {
    pop_sample <- sample(popn, n, replace = FALSE)
    return(mean(pop_sample))
}

# Calculate means using a FOR loop on a vector without preallocation
loopy_sample1 <- function(popn, n, num) {
    result1 <- vector()  # Initialize empty vector of size 1
    for (i in 1:num) {
        result1 <- c(result1, myexperiment(popn, n))
    }
    return(result1)
}

# To run 'num' iterations of the experiment using a FOR loop on a vector with preallocation
loopy_sample2 <- function(popn, n, num) {
    result2 <- vector(,num)  # preallocate expected size
    for (i in 1:num) {
        result2[i] <- myexperiment(popn, n)
    }
    return (result2)
}

# Using a FOR loop on a list with preallocation
loopy_sample3 <- function(popn, n, num) {
    result3 <- vector("list", num)  # preallocation
    for (i in 1:num) {
        result3[[i]] <- myexperiment(popn, n)
    }
    return (result3)
}

# Using vectorization with lapply
lapply_sample <- function(popn, n, num) {
    result4 <- lapply(1:num, function(i) myexperiment(popn, n))
    return (result4)
}

# Using vectorization with sapply
sapply_sample <- function(popn, n, num) {
    result5 <- sapply(1:num, function(i) myexperiment(popn, n))
    return (result5)
}

################################################

# Set seed to get the same result every time
set.seed(12345)
popn <- rnorm(10000)  # generate the population
hist(popn)

# Run and time the functions
n <- 100 # sample size for each experiment
num <- 10000 # Number of times to rerun the experiment

print("Using loops without preallocation on a vector took:" )
print(system.time(loopy_sample1(popn, n, num)))

print("Using loops with preallocation on a vector took:" )
print(system.time(loopy_sample2(popn, n, num)))

print("Using loops with preallocation on a list took:" )
print(system.time(loopy_sample3(popn, n, num)))

print("Using the vectorized sapply function (on a list) took:" )
print(system.time(sapply_sample(popn, n, num)))

print("Using the vectorized lapply function (on a list) took:" )
print(system.time(lapply_sample(popn, n, num)))
**********************************************************************

Testing sample.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops without preallocation on a vector took:"
   user  system elapsed 
  0.174   0.013   0.187 
[1] "Using loops with preallocation on a vector took:"
   user  system elapsed 
  0.117   0.000   0.117 
[1] "Using loops with preallocation on a list took:"
   user  system elapsed 
  0.118   0.000   0.117 
[1] "Using the vectorized sapply function (on a list) took:"
   user  system elapsed 
  0.118   0.000   0.118 
[1] "Using the vectorized lapply function (on a list) took:"
   user  syst
**********************************************************************

Code ran without errors

Time consumed = 0.83207s

======================================================================
Inspecting script file Vectorize1.R...

File contents are:

**********************************************************************
M <- matrix(runif(1000000), 1000, 1000)

SumAllElements <- function(M) {  # use loop to sum up elements one by one
    Dimensions <- dim(M)
    Tot <- 0
    for (i in 1:Dimensions[1]) {
        for (j in 1:Dimensions[2]) {
            Tot <- Tot + M[i, j]
        }
    }
    return(Tot)
}

print("Using loops, the time taken is:")
print(system.time(SumAllElements(M)))  # `system.time` calculates how much time your code takes

print("Using the in-built vectorized function, the time taken is:")
print(system.time(sum(M)))  
# `sum()` uses vectorization and avoid the amount of looping like `SumAllElements`, so it's much faster

**********************************************************************

Testing Vectorize1.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Using loops, the time taken is:"
   user  system elapsed 
  0.031   0.000   0.031 
[1] "Using the in-built vectorized function, the time taken is:"
   user  system elapsed 
  0.001   0.000   0.000 

**********************************************************************

Code ran without errors

Time consumed = 0.15569s

======================================================================
Inspecting script file R_conditionals.R...

File contents are:

**********************************************************************
# Checks if an integer is even
is.even <- function(n = 2) {
    if (n %% 2 == 0) {
        return(paste(n, 'is even!'))
    } else {
        return(paste(n, 'is odd!'))
    }
}

is.even(6)

# Checks if a number is a power of 2
is.power2 <- function(n = 2) {
    if (log2(n) %% 1 == 0) {
        return(paste(n, 'is a power of 2!'))
    } else {
        return(paste(n, 'is not a power of 2!'))
    }
}

is.power2(4)

# Checks if a number is prime
is.prime <- function(n) {
    if (n == 0) {
        return(paste(n, 'is a zero!'))
    } else if (n == 1) {
        return(paste(n, 'is just a unit!'))
    }

    ints <- 2:(n-1)

    if (all(n %% ints != 0)) {
        return(paste(n, 'is a prime!'))
    } else {
        return(paste(n, 'is a composite!'))
    }
}

is.prime(3)

**********************************************************************

Testing R_conditionals.R...

Output (only first 500 characters): 


**********************************************************************
[1] "6 is even!"
[1] "4 is a power of 2!"
[1] "3 is a prime!"

**********************************************************************

Code ran without errors

Time consumed = 0.08970s

======================================================================
Inspecting script file apply1.R...

File contents are:

**********************************************************************
## `apply` can be used when you want to apply a function to the rows or columns of a matrix/array

# Build a random matrix
M <- matrix(rnorm(100), 10, 10)

# Take the mean of each row
RowMeans <- apply(M, 1, mean)
print(RowMeans)

# Variance of each row
RowVars <- apply(M, 1, var)
print(RowVars)

# By column
ColMeans <- apply(M, 2, mean)
print(ColMeans)

**********************************************************************

Testing apply1.R...

Output (only first 500 characters): 


**********************************************************************
 [1]  0.184446622  0.329495164 -0.337201432 -0.009170369  0.329771037
 [6] -0.029731799  0.077730005 -0.254060624  0.494196071 -0.177197578
 [1] 1.2906379 0.7663926 0.6552683 0.9750980 1.1141704 0.3587303 1.1347107
 [8] 0.9595491 0.8768423 1.5334860
 [1] -0.23104505  0.17895177 -0.15348552  0.41197871 -0.38783786  0.34129004
 [7] -0.03499233  0.30271566 -0.03535786  0.21605952

**********************************************************************

Code ran without errors

Time consumed = 0.08810s

======================================================================
Inspecting script file basic_io.R...

File contents are:

**********************************************************************
# Illustrate R inout-output

MyData <- read.csv("../data/trees.csv", header = T)  # import with headers

write.csv(MyData, "../results/MyData.csv")  # write it out as a new file

write.table(MyData[1, ], file = "../results/MyData.csv", append = T)  # append to it

write.csv(MyData, "../results/MyData.csv", row.names = T)  # write row names

write.table(MyData, "../results/MyData.csv", col.names = F)  # ignore column names

**********************************************************************

Testing basic_io.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Warning message:
In write.table(MyData[1, ], file = "../results/MyData.csv", append = T) :
  appending column names to file

======================================================================
Inspecting script file Girko.R...

File contents are:

**********************************************************************
## load ggplot2 for plotting
require(ggplot2)

## Build a function to calculate the elipse
build_elipse <- function(hradius, vradius){
    npoints = 250
    a <- seq(0, 2 * pi, length = npoints + 1)
    x <- hradius * cos(a)
    y <- vradius * sin(a)
    return(data.frame(x = x, y = y))
}


N <- 250  # assign the size of the matrix
M <- matrix(rnorm(N * N), N, N)  # build the matrix
eigvals <- eigen(M)$values  # find the eigenvalues
eigDF <- data.frame("Real" = Re(eigvals), "Imaginary" = Im(eigvals))  # build a dataframe
my_radius <- sqrt(N)  # calculate the radius of the circle
ellDF <- build_elipse(my_radius, my_radius)  # dataframe to plot the elipse
names(ellDF) <- c("Real", "Imaginary")  # rename the columns


## Plotting
# plot the eigenvalues
p <- ggplot(eigDF, aes(x = Real, y = Imaginary))
p <- p +
    geom_point(shape = I(3)) +
    theme(legend.position = "none")

# add the vertical and horizontal line
p <- p + geom_hline(aes(yintercept = 0))
p <- p + geom_vline(aes(xintercept = 0))

# add the ellipse
p <- p + geom_polygon(data = ellDF, aes(x = Real, y = Imaginary, alpha = 1/20, fill = "red"))
p


## Output the result figure into results directory
dir.create("../results", showWarnings = FALSE)  # Create the directory if it doesn't exist
ggsave("../results/Girko.pdf", plot = p)
**********************************************************************

Testing Girko.R...

Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: ggplot2
Saving 7 x 7 in image

======================================================================
Inspecting script file boilerplate.R...

File contents are:

**********************************************************************
# A boilerplate R script

MyFunction <- function(Arg1, Arg2) {

    # Statements involving Arg1, Arg2:
    print(paste("Arguments", as.character(Arg1), "is a", class(Arg1)))  # print Arg1's type
    print(paste("Arguments", as.character(Arg2), "is a", class(Arg2)))  # print Arg2's type

    return (c(Arg1, Arg2))  # optional, but very useful
}

MyFunction(1,  2)  # test the function
MyFunction("Riki", "Tiki")  # another test
**********************************************************************

Testing boilerplate.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Arguments 1 is a numeric"
[1] "Arguments 2 is a numeric"
[1] 1 2
[1] "Arguments Riki is a character"
[1] "Arguments Tiki is a character"
[1] "Riki" "Tiki"

**********************************************************************

Code ran without errors

Time consumed = 0.10239s

======================================================================
Inspecting script file apply2.R...

File contents are:

**********************************************************************
SomeOperation <- function(v) {
    if (sum(v) > 0) {  # `sum(v)` is a single value
        return (v * 100)  # if the sum of v is greater than 0, multiplies all values in v by 100 and return them
    } else {
        return (v)
    }
}

M <- matrix(rnorm(100), 10, 10)
print(apply(M, 1, SomeOperation))

**********************************************************************

Testing apply2.R...

Output (only first 500 characters): 


**********************************************************************
             [,1]        [,2]       [,3]        [,4]       [,5]       [,6]
 [1,]    1.084186 -1.67785065 -0.9325699 -200.851910  0.6634205   69.21067
 [2,]   88.864210  2.62464352 -0.9089046  137.752176  0.2591011 -149.20870
 [3,] -115.631011 -1.22886992  1.1486915  -40.997117 -1.0627500   62.57148
 [4,]   49.087854 -0.58542211  0.1736704   28.519627  0.4830996  166.30674
 [5,]   50.543203  0.63284787  1.2627486   37.179097 -1.4781472   47.92817
 [6,]  -47.660771 -0.22268269 -0.1794785   50.29964
**********************************************************************

Code ran without errors

Time consumed = 0.09804s

======================================================================
Inspecting script file DataWrang.R...

File contents are:

**********************************************************************
################################################################
################## Wrangling the Pound Hill Dataset ############
################################################################

############# Load the dataset ###############
# header = false because the raw data don't have real headers
MyData <- as.matrix(read.csv("../data/PoundHillData.csv", header = FALSE))

# header = true because we do have metadata headers
MyMetaData <- read.csv("../data/PoundHillMetaData.csv", header = TRUE, sep = ";")

############# Inspect the dataset ###############
head(MyData)
dim(MyData)  # show or set the dimension of an object
str(MyData)  # show the internal strcture of an object
fix(MyData)  # display in a data editor
fix(MyMetaData)

############# Transpose ###############
# To get those species into columns and treatments into rows 
MyData <- t(MyData) 
head(MyData)
dim(MyData)

############# Replace species absences with zeros ###############
MyData[MyData == ""] = 0

############# Convert raw matrix to data frame ###############

TempData <- as.data.frame(MyData[-1,],stringsAsFactors = F) #stringsAsFactors = F is important!
colnames(TempData) <- MyData[1,] # assign column names from original data

############# Convert from wide to long format  ###############
require(reshape2) # load the reshape2 package

?melt #check out the melt function

MyWrangledData <- melt(TempData, id=c("Cultivation", "Block", "Plot", "Quadrat"), variable.name = "Species", value.name = "Count")

# assign data types to each column
MyWrangledData[, "Cultivation"] <- as.factor(MyWrangledData[, "Cultivation"])
MyWrangledData[, "Block"] <- as.factor(MyWrangledData[, "Block"])
MyWrangledData[, "Plot"] <- as.factor(MyWrangledData[, "Plot"])
MyWrangledData[, "Quadrat"] <- as.factor(MyWrangledData[, "Quadrat"])
MyWrangledData[, "Count"] <- as.integer(MyWrangledData[, "Count"])

str(MyWrangledData)
head(MyWrangledData)
dim(MyWrangledData)

############# Exploring the data (extend the script below)  ###############

require(tidyverse)
# check packages inside tidyverse
tidyverse_packages(include_self = T)  # `include_self` measn list 'tidyverse' as well

## convert dataframe to tibble
# a "tibble" in tidyverse is a modified dataframe that makes data exploration more robust
MyWrangledData <- dplyr::as_tibble(MyWrangledData)  # same as `MyWranglesData <- as_tibble(MyWrangledData)`
MyWrangledData
class(MyWrangledData)

glimpse(MyWrangledData)  # like str(), but nicer
utils::View(MyWrangledData)  # same as fix()
filter(MyWrangledData, Count > 100)  # like subset() but nicer
slice(MyWrangledData, 10:15)  # look at a particular range of rows 

## Using "pipe" `%>%`
MyWrangledData %>%
    group_by(Species) %>%
        summarise(avg = mean(Count))
            # add `print(n = ...)` to see more rows, as the default output only shows 10 rows

# the same as using base R:
# aggregate(MyWrangledData$Count, list(MyWrangledData$Species), FUN=mean)
**********************************************************************

Testing DataWrang.R...

Output (only first 500 characters): 


**********************************************************************
     V1                     V2        V3        V4        V5        V6       
[1,] "Cultivation"          "october" "october" "october" "october" "october"
[2,] "Block"                "a"       "a"       "a"       "a"       "a"      
[3,] "Plot"                 "1"       "1"       "1"       "1"       "1"      
[4,] "Quadrat"              "Q1"      "Q2"      "Q3"      "Q4"      "Q5"     
[5,] "Achillea millefolium" "4"       "8"       "3"       "20"      "6"      
[6,] "Agrostis gigantea"    ""   
**********************************************************************

Code ran without errors

Time consumed = 10.00504s

======================================================================
Inspecting script file control_flow.R...

File contents are:

**********************************************************************
## If statements
a <- TRUE
if (a == TRUE) {
    print ("a is TRUE")
} else {
    print ("a is FALSE")
}

z <- runif(1)  # generate a uniformly distributed random number
if (z <= 0.5) {
    print ("Less than a half")
} 


## for loops
for (i in 1:10) {  # same as seq(10), generating integers from 1 to 10
    j <- i * i
    print(paste(i, " squared is", j))
}

for (species in c('Heliodoxa rubinoides', 
                 'Boissonneaua jardini', 
                 'Sula nebouxii')) {
        print(paste('The species is', species))
}

v1 <- c("a", "bc", "def")
for (i in v1) {
    print(i)
}


## while loops
i <- 0
while (i < 10) {
    i <- i + 1
    print(i^2)
}

**********************************************************************

Testing control_flow.R...

Output (only first 500 characters): 


**********************************************************************
[1] "a is TRUE"
[1] "1  squared is 1"
[1] "2  squared is 4"
[1] "3  squared is 9"
[1] "4  squared is 16"
[1] "5  squared is 25"
[1] "6  squared is 36"
[1] "7  squared is 49"
[1] "8  squared is 64"
[1] "9  squared is 81"
[1] "10  squared is 100"
[1] "The species is Heliodoxa rubinoides"
[1] "The species is Boissonneaua jardini"
[1] "The species is Sula nebouxii"
[1] "a"
[1] "bc"
[1] "def"
[1] 1
[1] 4
[1] 9
[1] 16
[1] 25
[1] 36
[1] 49
[1] 64
[1] 81
[1] 100

**********************************************************************

Code ran without errors

Time consumed = 0.14053s

======================================================================
Inspecting script file MyBars.R...

File contents are:

**********************************************************************
# load ggplot2
require(ggplot2)

# read the file for plotting
a <- read.table("../data/Results.txt", header = TRUE)
head(a)

a$ymin <- rep(0, dim(a)[1]) # append a column of zeros

# Print the first linerange
p <- ggplot(a)
p <- p + geom_linerange(data = a, aes(
                          x = x,  # x-axis position defined by the column "x"
                          ymin = ymin,  # start of the line segment
                          ymax = y1,  # end of the line segment
                          size = (0.5)  # line thickness
                          ),
                        colour = "#E69F00",
                        alpha = 1/2, show.legend = FALSE)  # disable the legend for this layer

# Print the second linerange
p <- p + geom_linerange(data = a, aes(
                          x = x,
                          ymin = ymin,
                          ymax = y2,
                          size = (0.5)
                          ),
                        colour = "#56B4E9",
                        alpha = 1/2, show.legend = FALSE)

# Print the third linerange
p <- p + geom_linerange(data = a, aes(
                          x = x,
                          ymin = ymin,
                          ymax = y3,
                          size = (0.5)
                          ),
                        colour = "#D55E00",
                        alpha = 1/2, show.legend = FALSE)

# Annotate the plot with labels
# labels drawn below y-axis (y = -500)
p <- p + geom_text(data = a, aes(x = x, y = -500, label = Label))

# now set the axis labels, remove the legend, and prepare for bw printing
p <- p + scale_x_continuous("My x axis",  # x-axis label
                            breaks = seq(3, 5, by = 0.05)) +  # define the tick marks for x-axis
                            scale_y_continuous("My y axis") + 
                            theme_bw() + 
                            theme(legend.position = "none")  # remove legends
p

# Save the result graph
pdf("../results/MyBars.pdf", 10, 8.3)  # open blank pdf page
print(p)  # Print the graph to the PDF
dev.off()  # Close the PDF device

**********************************************************************

Testing MyBars.R...

Output (only first 500 characters): 


**********************************************************************
         x   y1   y2 y3 Label
1 3.515424 4320 4320  0  <NA>
2 3.533984 2160 2160  0  <NA>
3 3.557647 4320 4320  0  <NA>
4 3.569953 4320 4320  0  <NA>
5 3.578984 8640 8640  0  <NA>
6 3.585665 2160 2160  0  <NA>
pdf 
  2 

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: ggplot2
Warning message:
Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.
ℹ Please use `linewidth` instead. 
Warning message:
Removed 91 rows containing missing values or values outside the scale range
(`geom_text()`). 
Warning message:
Removed 91 rows containing missing values or values outside the scale range
(`geom_text()`). 

======================================================================
Inspecting script file TreeHeight.R...

File contents are:

**********************************************************************
# This function calculates heights of trees given distance of each tree 
# from its base and angle to its top, using  the trigonometric formula 
#
# height = distance * tan(radians)
#
# ARGUMENTS
# degrees:    The angle of elevation of tree
# distance:   The distance from base of tree (e.g., meters)
#
# OUTPUT
# The heights of the tree, same units as "distance"

TreeHeight <- function(degrees, distance) {
    radians <- degrees * pi / 180
    height <- distance * tan(radians)
    print(paste("Tree height is:", height))

    return(height)
}

TreeHeight(37, 40)

**********************************************************************

Testing TreeHeight.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Tree height is: 30.1421620041118"
[1] 30.14216

**********************************************************************

Code ran without errors

Time consumed = 0.09048s

======================================================================
Inspecting script file TestR.py...

File contents are:

**********************************************************************
import subprocess
p = subprocess.Popen("Rscript --verbose TestR.R > ../results/TestR.Rout 2> ../results/TestR_errFile.Rout", shell=True).wait()
**********************************************************************

Testing TestR.py...

TestR.py is a Python script file;

checking for docstrings...

No functions, but no script-level docstring either
Output (only first 500 characters): 


**********************************************************************

**********************************************************************

Code ran without errors

Time consumed = 0.11149s

======================================================================
Inspecting script file TestR.R...

File contents are:

**********************************************************************
print("Hello, this is R!")
**********************************************************************

Testing TestR.R...

Output (only first 500 characters): 


**********************************************************************
[1] "Hello, this is R!"

**********************************************************************

Code ran without errors

Time consumed = 0.09940s

======================================================================
Inspecting script file plotLin.R...

File contents are:

**********************************************************************
require(ggplot2)

# Create some random "data" for linear regression
x <- seq(0, 100, by = 0.1)
y <- -4. + 0.25 * x +
  rnorm(length(x), mean = 0., sd = 2.5)

# put them in a dataframe
my_data <- data.frame(x = x, y = y)

# perform a linear regression
my_lm <- summary(lm(y ~ x, data = my_data))

# plot the data
p <-  ggplot(my_data, aes(x = x, y = y,
                          colour = abs(my_lm$residual))
             ) +
  geom_point() +  # add scatter plot points
  scale_colour_gradient(low = "black", high = "red") +  # colour points with low/high residuals in black/red
  theme(legend.position = "none") +  # remove the legend
  scale_x_continuous(
    expression(alpha^2 * pi / beta * sqrt(Theta)))  # write the x-axis label in mathematical expression

# add the regression line
p <- p + geom_abline(
  intercept = my_lm$coefficients[1][1],
  slope = my_lm$coefficients[2][1],
  colour = "red")  # colour the regression line in red
  
# throw some math on the plot
p <- p + geom_text(aes(x = 60, y = 0,
                       label = "sqrt(alpha) * 2* pi"), 
                       parse = TRUE,  # Interpret the label as a mathematical expression
                       size = 6,  # set the text size
                       colour = "blue")

p

# Save the result graph
pdf("../results/MyLinReg.pdf", 10, 8.3)  # open blank pdf page
print(p)  # Print the graph to the PDF
dev.off()  # Close the PDF device

**********************************************************************

Testing plotLin.R...

Output (only first 500 characters): 


**********************************************************************
pdf 
  2 

**********************************************************************

Encountered error (or warning):

***IGNORE IF THIS ERROR IS EXPECTED AS PART OF AN IN-CLASS EXERCISE***

Loading required package: ggplot2
Warning message:
In geom_text(aes(x = 60, y = 0, label = "sqrt(alpha) * 2* pi"),  :
  All aesthetics have length 1, but the data has 1001 rows.
ℹ Please consider using `annotate()` or provide this layer with data containing
  a single row.
Warning message:
In geom_text(aes(x = 60, y = 0, label = "sqrt(alpha) * 2* pi"),  :
  All aesthetics have length 1, but the data has 1001 rows.
ℹ Please consider using `annotate()` or provide this layer with data containing
  a single row.

======================================================================
Inspecting script file next.R...

File contents are:

**********************************************************************
for (i in 1:10) {
    if ((i %% 2) == 0)  # check if the number is odd
        next  # pass to next iteration of the loop
    print(i)
}

**********************************************************************

Testing next.R...

Output (only first 500 characters): 


**********************************************************************
[1] 1
[1] 3
[1] 5
[1] 7
[1] 9

**********************************************************************

Code ran without errors

Time consumed = 0.09741s

======================================================================
Inspecting script file preallocate.R...

File contents are:

**********************************************************************
# No pre-allocation
NoPreallocFun <- function(x) {
    a <- vector()  # empty vector
    for (i in 1:x) {
        a <- c(a, i)  # concatenate
        print(a)
        print(object.size(a))  # can see R resize the vector and re-allocate more memory (will get slow as vectors get big)
    }
}

system.time(NoPreallocFun(10))


# Pre-allocation
PreallocFun <- function(x) {
    a <- rep(NA, x) 
    for (i in 1:x) {
        a[i] <- i  # assign
        print(a)
        print(object.size(a))
    }
}

system.time(PreallocFun(10))

**********************************************************************

Testing preallocate.R...

Output (only first 500 characters): 


**********************************************************************
[1] 1
56 bytes
[1] 1 2
56 bytes
[1] 1 2 3
64 bytes
[1] 1 2 3 4
64 bytes
[1] 1 2 3 4 5
80 bytes
[1] 1 2 3 4 5 6
80 bytes
[1] 1 2 3 4 5 6 7
80 bytes
[1] 1 2 3 4 5 6 7 8
80 bytes
[1] 1 2 3 4 5 6 7 8 9
96 bytes
 [1]  1  2  3  4  5  6  7  8  9 10
96 bytes
   user  system elapsed 
   0.01    0.00    0.01 
 [1]  1 NA NA NA NA NA NA NA NA NA
96 bytes
 [1]  1  2 NA NA NA NA NA NA NA NA
96 bytes
 [1]  1  2  3 NA NA NA NA NA NA NA
96 bytes
 [1]  1  2  3  4 NA NA NA NA NA NA
96 bytes
 [1]  1  2  3  4  5 NA N
**********************************************************************

Code ran without errors

Time consumed = 0.12300s

======================================================================
======================================================================
Finished running scripts

Ran into 4 errors

======================================================================
======================================================================

FINISHED LOGGING

