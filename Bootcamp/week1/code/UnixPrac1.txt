#change directory to fasta
cd ../data/fasta

# 1 Count how many lines in each file
wc -l *.fasta

# 2 Print E.coli genome from the second line
tail -n +2 E.coli.fasta

# 3 Count the sequence length of E.coli genome
tail -n +2 E.coli.fasta | tr -d '\n' | wc -c

# 4 Count "ATGC" matches in the E.coli genome
grep -c ATGC E.coli.fasta

# 5 Calculate AT/GC ratio in each file
find . -name "*.fasta" -exec sh -c 'tail -n +2 "$1" | awk "{A+=gsub(/A/, \"A\"); T+=gsub(/T/, \"T\"); G+=gsub(/G/, \"G\"); C+=gsub(/C/, \"C\")} END {{print \"$1: \" (A+T)/(G+C)}}" ' _ {} \;

# the '.' after find refers to the current directory.
# -exec allows find to execue the following command (sh -c '...' _ {}) for each file it finds.
# sh -c '...' executes the shell command inside '...'.
# _ {} are placeholders for arguments: 
# _ is a dummy placeholder required by sh -c. Because in sh -c, the first argument (_) is the name of the script, while file name is $1.
# {} represents each file from find.
# awk is for pattern scanning and text proccessing.
# A+=: add the result of gsub() to A. Variable A is initialized by awk as 0.
# gsub (global substitution) searches for matches and replace the string. It returns the number of substitutions. Sytax: gsub(regex, replacement)
# gsub(/A/, \"A\") replaces A with itself, which returns the number of A. The \ are to escape double quoes inside the sh -c command. 
# END {...} runs after processing all lines in the file.
# \; at the end indicates to execute each file found.